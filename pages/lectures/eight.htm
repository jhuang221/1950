<!-- sub Menu -->
<div id="submenu"><ul>

<li><a href="#Server_Development_Environment" class='topic'>Server Development Environment</a>

</li><li><a href="#Exercise_#1_Install_and_run_an_HTTP_server" class='topic'>Exercise #1 Install and run an HTTP server</a>

</li><li><a href="#Server_Structure_and_Management" class='topic'>Server Structure and Management</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Server_Root" class='subtopic'>Server Root</a></li>&nbsp;<li><a href="#HTTP_Ports" class='subtopic'>HTTP Ports</a></li>&nbsp;<li><a href="#Building_URLs_Relative_to_Server_Root" class='subtopic'>Building URLs Relative to Server Root</a></li>
</ul></div></li><li><a href="#Exercise_#2_Server_Root_Based_Pathing" class='topic'>Exercise #2 Server Root Based Pathing</a>

</li><li><a href="#Server_Configuration" class='topic'>Server Configuration</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Managing_The_Server" class='subtopic'>Managing The Server</a></li>&nbsp;<li><a href="#Server_'config'_Files" class='subtopic'>Server 'config' Files</a></li>&nbsp;<li><a href="#Managing_The_Server_With_.htaccess" class='subtopic'>Managing The Server With .htaccess</a></li>
</ul></div></li><li><a href="#Exercise_#3_Use_.htaccess" class='topic'>Exercise #3 Use .htaccess</a>

</li><li><a href="#What_are_Server_Side_Includes" class='topic'>What are Server Side Includes</a>

</li><li><a href="#How_do_SSIs_work" class='topic'>How do SSIs work</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Can_be_a_powerful_tool_for_web_development" class='subtopic'>Can be a powerful tool for web development</a></li>
</ul></div></li><li><a href="#Enable_Sever_Side_Includes" class='topic'>Enable Sever Side Includes</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Choose_one_of_the_following" class='subtopic'>Choose one of the following</a></li>
</ul></div></li><li><a href="#SSI_Tokens" class='topic'>SSI Tokens</a>

</li><li><a href="#Common_SSI_Tokens" class='topic'>Common SSI Tokens</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Are_there_any_requirements" class='subtopic'>Are there any requirements</a></li>&nbsp;<li><a href="#Best_practices" class='subtopic'>Best practices</a></li>
</ul></div></li><li><a href="#Exercise_#4_Run_An_Example_SSI" class='topic'>Exercise #4 Run An Example SSI</a>

</li><li><a href="#Exercise_#5_Formatting" class='topic'>Exercise #5 Formatting</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Formatting" class='subtopic'>Formatting</a></li>
</ul></div></li><li><a href="#Include_Files" class='topic'>Include Files</a>
<div class='subtopic'><ul class='subtopic'><li><a href="#Adding_the_Include_token_will_import_code_from_external_files" class='subtopic'>Adding the Include token will import code from external files</a></li>
</ul></div></li><li><a href="#Exercise_#6a_Dynamic_Navigation" class='topic'>Exercise #6a Dynamic Navigation</a>

</li><li><a href="#SSI_Control_Structure" class='topic'>SSI Control Structure</a>

</li><li><a href="#Exercise_#6b_Dynamic_Navigation" class='topic'>Exercise #6b Dynamic Navigation</a>

</li><li><a href="#SSI_Advanced_Exercise_Gallery" class='topic'>SSI Advanced Exercise Gallery</a>

</li><li><a href="#Homework" class='topic'>Homework</a>
</li></ul></div><!-- end sub Menu -->
<!-- [3]:  -->
 
<div class="contblock"><h2></h2>
<div>

			<ul>	
			<li>Quiz #6</li>
				<li>Server side development</li>
				<li>Server environment and configuration</li>
				<li>Server side includes, tokens</li>
				<li>Query string value passing</li>
			</ul>
		
</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Server Development Environment -->
 
<div id="Server_Development_Environment" class="contblock"><h2>Server Development Environment</h2>
<div>

	<p>A common practice among developers is to create a Server/Client environment on a local network, closed to the world wide web. This provides a private, safe place to test and debug sites that use server side scripting. There are several HTTP server programs available to choose from.</p>
	<h4>HTTP servers</h4>
	<ul>
	<li><a href="http://httpd.apache.org/">Apache</a></li>
	<li><a href="http://www.iis.net/community">IIS</a></li>
	</ul>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #1: Install and run an HTTP server -->
 
<div id="Exercise_#1_Install_and_run_an_HTTP_server" class="contblock"><h2>Exercise #1: Install and run an HTTP server</h2>
<div>

	<p>Install a web server environment on your client machine.</p>
	<ol>
<li>download an open source server package for your operating system:
	<ul>
		<li><a href="http://www.wampserver.com/en/">WAMP</a> - windows (<a href="/_shared_resources_1950/downloads/wampserver3.0.6_x64_apache2.4.23_mysql5.7.14_php5.6.25-7.0.10.exe">alternative WAMP download link<a/>)</li>
		<li><a href="http://www.mamp.info/en/">MAMP</a> - macintosh</li>
	</ul>
</li>	
<li><strong>important:</strong> if using BCIT lab computers, install the server to the C: drive</li>
<li>install the downloaded package with default settings</li>
<li>start the http server</li>
<li>visit <code>http://localhost</code> in your web browser. Mac users visit visit <code>http://localhost:8888</code></li>

	</ol>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Server Structure and Management -->
 
<div id="Server_Structure_and_Management" class="contblock"><h2>Server Structure and Management</h2>
<div>


<div id="Server_Root"><h3>Server Root</h3><div>
<p>Locate the <code>www</code> (Windows) or <code>htdocs</code> (Macintosh) folder in your server installation. This is known as the <strong>server root</strong>. Any documents that your server needs access to must be placed inside this folder or in subfolders. Documents not inside this folder cannot be retrieved by the server. The <strong>server root</strong> physical address is mapped to the <strong>http://localhost</strong> virtual address. When you visit localhost in a web browser, your server will display the contents of the <strong>server root</strong>.</p>

</div></div><div id="HTTP_Ports"><h3>HTTP Ports</h3><div>
<p>Internet communications associate port numbers along with the protocol and host IP address. The default port for HTTP transactions is <code>80</code>, and HTTPS uses <code>443</code>. When the default port is used, it does not need to be explicitly stated in a URL. If an alternative port is used, it must be included after the hostname:</p>
<ul>
	<li><code>http://localhost/index.html</code> - view the localhost server on the default port</li>
	<li><code>http://localhost:8888/index.html</code> - view the localhost server on port 8888</li>
</ul>
<p>Ports are not shared, so if one application is using a port already (Eg Skype uses both ports 80 and 443) then other applications must use alternative ports.</p>

</div></div><div id="Building_URLs_Relative_to_Server_Root"><h3>Building URLs Relative to Server Root</h3><div>
<p>Unlike files on a client machine, files on a server have a new kind of relative path they may use.</p>
<ul>
	<li><code>css/style.css</code> relative path (look in the css folder for style.css)</li>
	<li><code>./css/style.css</code> another relative path (starting from the current directory, look in css folder for style.css)</li>
	<li><code>../css/style.css</code> another relative path (move to the parent directory, then look for the css folder containing style.css)</li>
	<li>**servers only** <code>/css/style.css</code> if the relative URL begins with a forward slash, then the path begins at the server root looking for the css folder. HTML, CSS, Javascript and Server side Scripts that use server root based paths can be located <strong>anywhere</strong> in the server root or in any subfolders, increasing code portability</li>
</ul>

</div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #2: Server Root Based Pathing -->
 
<div id="Exercise_#2_Server_Root_Based_Pathing" class="contblock"><h2>Exercise #2: Server Root Based Pathing</h2>
<div>

<p>Server root based paths can allow more portable code. Paths that begin with a <code>/</code> (forward slash) will begin at the server root. For example, if your server root folder is <code>www</code> and is located at <code>C:/wamp/www</code>, then the following address <code>/css/styles.css</code> will be mapped to <code>C:/wamp/www/css/styles.css</code></p>
<ol>
	<li><a href="/_shared_resources_1950/downloads/apache_server_exercise.zip">Download the exercise starting files</a></li>
	<li>Uncompress the contents of the exercise download</li>
	<li>Place all files and folders in your server root (<code>css</code>, <code>images</code> and <code>errors</code> folders)</li>
	<li>Update the HTML file <code>sample_file.html</code> wherever it references images or css files: Currently relative paths are used. Change these to server-based relative paths</li>
	<li>Request this page on localhost to confirm the stylesheet and images are loading</li>
	<li>Make a copy of the HTML page and place it in a subfolder created by you. Test this page via localhost to demonstrate the increased portability of your HTML code</li>
	

</ol>


</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Server Configuration -->
 
<div id="Server_Configuration" class="contblock"><h2>Server Configuration</h2>
<div>

	<div id="Managing_The_Server"><h3>Managing The Server</h3><div>
	<p>There are two ways to administer an Apache web server, either using the server configuration files or using a special text file named <code>.htaccess</code></p>
		<ol>
		<li>
		</div></div><div id="Server_'config'_Files"><h3>Server 'config' Files</h3><div>
		<p>There is a configuration file used for determining how the server behaves: <code>http.conf</code>. Access it via the WAMP icon on your taskbar</p>

		<p>If you have administrative access to the server, you can make changes directly to these config files. If you save these changes, then restart the server, the changes will take effect.</p>
		<p>Find and open the file <code>httpd.conf</code> in a text editor. Locate the following directives in the file:</p>
				<ul>
				<li><code>Listen 80</code> the port your server is accepting requests on (default HTTP port is 80)</li>
				<li><code>DocumentRoot </code> defines your server root folder</li>
				</ul>
		</li>
		<li>
		</div></div><div id="Managing_The_Server_With_.htaccess"><h3>Managing The Server With .htaccess</h3><div>
		<p>The <code>.htaccess</code> file is a text file used by the Apache HTTP server to configure basic behaviour without requiring server administrator privileges. Place this file in the server root for it to take effect</p>	
		<p>The <code>.htaccess</code> file is very powerful, and especially useful when you do not have access to the server configuration file (<code>httpd.conf</code>). You can determine what is displayed when errors occur (Error 404, 500, etc), prevent hotlinking of your images, etc.</p>	
		<fieldset><legend>Editing 'Invisible' Files On Mac</legend>
		<p>Macintosh developers may need to enable the visibility of system files such as <code>.htaccess</code>. You can follow these <a href="http://www.turnwall.com/articles/show-hidden-files-in-mac-os-x/">Mac instructions for enabling the editing of 'hidden' files</a>. Alternatively, if you use the free Mac text editor <a href="http://www.barebones.com/products/textwrangler/download.html">TextWrangler</a>, you can use its 'open hidden' file feature.</p>
		</fieldset>
		<h4>.htaccess Examples</h4>
		<p>You can find several <a href="http://www.askapache.com/htaccess/htaccess/">.htaccess examples</a> online. Here are few that are useful:</p>
		<ul>
			<li>redirect 404 errors to your custom error page. this same syntax works for <a href="http://www.askapache.com/htaccess/htaccess/#Custom_ErrorDocuments">all custom error documents</a>:<br /><code>ErrorDocument 404 /path/error_page.html</code></li>
			<li>disallow sites other than <code>mywebsite.ca</code> from directly linking to your images (and eating up your server's bandwidth):<br /><code>#change 'mywebsite.ca' below to your domain name<br />RewriteEngine on<br />
RewriteCond %{HTTP_REFERER} !^http(s)?://(www\.)?mywebsite.ca [NC]<br />
RewriteRule \.(jpg|jpeg|png|gif)$ - [NC,F,L]</code></li>
			<li>disallow requests for folders, requiring folders contain a <code>index.html</code> or else client requests must include a filename (this can reduce unnecessary snooping of your file system):<br /><code>Options -Indexes</code></li>
			
		</ul>
		</li>
		</ol></div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #3: Use .htaccess -->
 
<div id="Exercise_#3_Use_.htaccess" class="contblock"><h2>Exercise #3: Use .htaccess</h2>
<div>

<p>Edit and apply and .htaccess file to customize server behavior.</p>
<ul>
	<li><a href="/_shared_resources_1950/downloads/htaccess.zip">Download this .htaccess file.</a> Note it is a .zip file, so you will need to extract it before use. If using a Mac, the .htaccess file may be hidden. If so, follow these <a href="http://www.turnwall.com/articles/show-hidden-files-in-mac-os-x/">Mac instructions for enabling the editing of 'hidden' files</a></li>
	<li>Open the .htaccess in your text editor.</li>
	<li>Use <code>.htaccess</code> to assign default error message pages. Open the included <code>.htaccess</code> file, and add the following directives:<ul>
	<li><code>ErrorDocument 404 /errors/file_not_found.html</code></li>
	<li>Trigger an error by requesting over <code>localhost</code> a page that doesn't exist. Does <code>file_not_found.html</code> display and use the warning image? If not, examine <code>file_not_found.html</code>s paths, and ensure they match the file locations on your server</li>
</ul>

	

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: What are Server Side Includes? -->
 
<div id="What_are_Server_Side_Includes" class="contblock"><h2>What are Server Side Includes?</h2>
<div>

<p>Server Side Includes (SSI) are well supported server functions available to a web application.</p>
<p>SSIs are not as powerful as server side scripting, but are more portable than most scripts, since any HTTP server can run SSIs</p>
<p>A server function that allows for real-time echoing of information to the browser such as: 

</p><ul>
	<li>Time </li>
	<li>Date </li>
	<li>File information </li>
	<li>Loading page content from external files</li>
	<li>Conditional execution of documents </li>
</ul>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: How do SSIs work? -->
 
<div id="How_do_SSIs_work" class="contblock"><h2>How do SSIs work?</h2>
<div>

<ul>
	<li>A series of characters (called tokens) are included in your HTML </li>
	<li>As page is processed by the HTTP server, any tokens are sent to the SSI engine </li>
	<li>The processed result is then either output as HTML, or some server side function is instantiated. </li>
</ul>
 

<div id="Can_be_a_powerful_tool_for_web_development"><h3>Can be a powerful tool for web development:</h3><div>

<ul>
	<li>Further lightens your code.  A small SSI statement can take the place of a large, re-used codeblock</li>
	<li>This can save giant amounts of code footprint on your site!</li>
	<li>Code changes made easy.  If you have your navigation built into an SSI, you can make 1 change and all pages that subscribe to that SSI will change.</li>
	<li>Execute script and applications within HTML.  If you need to have live data on your site, you can write a mini-application that will execute each time you deliver a page.  BCIT's navigation system runs on this.</li>
</ul></div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Enable Sever Side Includes -->
 
<div id="Enable_Sever_Side_Includes" class="contblock"><h2>Enable Sever Side Includes</h2>
<div>

	<p>Each server may support one or more scripting languages. Most all servers support server side includes (SSI). SSIs are highly portable, since it does not depend on which server side scripting languages a particular server supports.</p> 
	<p>To enable SSI, you must either (1)  configure the server configuration file to process SSIs <strong>OR</strong> (2) include an <code>.htaccess</code> file in the server root </p>
	<div id="Choose_one_of_the_following"><h3>Choose one of the following:</h3><div>
<ol>


	<li>
		<h4>SSI Configuration</h4>
<p>
	<a href="http://httpd.apache.org/docs/1.3/howto/ssi.html#configuringyourservertopermitssi">Enable server side includes</a> on your server by making the following changes to the <code>httpd.conf</code> file:
</p>
	<ul>
		<li>Find the section where your server root directory is detailed (The second instance of the &lt;Directory&gt; tag).</li>
		<li>Inside the &lt;Directory&gt; tag, find the <code>Options</code> directive and add <code>+Includes</code> to the list of Options.</li>
		<li>Add the following to the end of the <code>httpd.conf</code> file:
		<pre><code>AddType text/html .shtml 
AddHandler server-parsed .shtml 
Options Indexes FollowSymLinks Includes</code></pre>
		</li>
		<li>save the changes</li>
		<li>restart the server</li>
	</ul>
	</li>
	
	<li><h4>.htaccess Configuration</h4></li>
	<ul><li>Add the following to the bottom of your <code>.htaccess</code> file:
	<pre><code>AddType text/html .shtml 
AddHandler server-parsed .shtml 
Options Indexes FollowSymLinks Includes</code></pre>
	</li>
	<li>place the <code>.htaccess</code> in your server root</li>
	</ul>
	</li>
</ol>
</div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: SSI Tokens -->
 
<div id="SSI_Tokens" class="contblock"><h2>SSI Tokens</h2>
<div>
<p>
	Each SSI Token has the following 4 pieces:

	</p><ol>
	<li><strong>&lt;!--#</strong> Opening identifier </li>
	<li><strong>{tag}</strong> is one of the following actions: 
		<ul><li>echo </li>
		<li>include </li>
		<li>fsize </li>
		<li>flastmod </li>
		<li>exec </li>
		<li>config </li>
		<li>odbc </li>
		<li>if </li>
		<li>goto </li>
		<li>label </li>
		<li>break </li></ul></li>
	<li> <strong>{variable set}</strong> can be any number of things based on attribute="variable" <br />
	Each tag has a different set of valid attributes and variables </li>
	<li><strong>--&gt;</strong> Closing identifier </li>
</ol>
	<p>Try one in your HTML code: <code>&lt;!--#echo var="DOCUMENT_NAME"--&gt;</code></p>
 
</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Common SSI Tokens -->
 
<div id="Common_SSI_Tokens" class="contblock"><h2>Common SSI Tokens</h2>
<div>
<p>The <strong>ECHO</strong> tag is one of the most common, allowing you to include a wide variety of document information: 
</p><ul>
	<li><strong>DOCUMENT_NAME:</strong> The current filename. </li>
	<li><strong>DOCUMENT_URI:</strong> The virtual path to this document (such as /docs/tutorials/foo.shtml). </li>
	<li><strong>LAST_MODIFIED:</strong> The last modification date of the current document. Subject to timefmt like the others. </li>
	<li><strong>DATE_LOCAL:</strong> The current date, local time zone. Subject to the timefmt parameter to the config command. </li>
	<li><strong>DATE_GMT:</strong> Same as DATE_LOCAL but in Greenwich mean time. </li>
	<li>These can be combined with the ECHO command to produce the results above</li>
	<li>An example: <code>&lt;!--#echo var="VARIABLE" --&gt;</code></li>
	<li>The <strong>EXEC</strong> tag allows you to execute code (such as PHP or PERL) while the HTML itself is being processed.  </li>
	<li>The <strong>INCLUDE</strong> tag is likely the most common. It allows you to include documents or document fragments right in your HTML.  <em>This is what we will be doing today.</em></li>
</ul> 


<div id="Are_there_any_requirements"><h3>Are there any requirements?</h3><div>

<p>Yes! There are a few:

</p><ul>
	<li>Your server must have the SSI module activated (there are SSI modules for almost every web server in existence) OR include an appropriate .htaccess file </li>
	<li>Sometimes you may need to use a different extension on your HTML (usually SHTML) so that the server will understand that it needs to process embedded SSIs</li>
</ul> 
 

</div></div><div id="Best_practices"><h3>Best practices</h3><div>

<ul>
	<li>Comment your SSIs in your code so that you know where they are supposed to be and what they are supposed to do (especially if they don't work!)</li>
	<li>Some developers prefer to use the .shtml extension for all SSI files, to make it clear that a page requires SSI enabled</li>
	<li>Additionally, putting them in their own directory (like: <code>/inc</code>) helps: easier to find and always in a "known" spot</li>
	<li>Common usage: <code>/inc/date.inc</code> or <code>/inc/nav.inc</code></li>
</ul>
 
 

<p>SSI examples: <a href="http://httpd.apache.org/docs/howto/ssi.html">Apache SSI How to</a>
</p>	

</ul>


 </div></div>
</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #4: Run An Example SSI -->
 
<div id="Exercise_#4_Run_An_Example_SSI" class="contblock"><h2>Exercise #4: Run An Example SSI</h2>
<div>


<ul>
	<li>Download a <a href="/_shared_resources_1950/downloads/htaccess.zip">.zip file containing an .htaccess</a> and, after uncompressing it, place the <code>.htaccess</code> file in your server root.</li>
	<li>Create an HTML page using the extension <code>.shtml</code></li>
	<li>Add the following lines in the body of the page:<br /><code>&lt;!--#echo var="DOCUMENT_NAME"--></code> </li>
	<li>Place your <code>.shtml</code> file in your server root and test it using localhost. The page should display it's file name. If not, see your instructor. If so, proceed to the next step...</li>
	<li>Make a copy of your <code>.shtml</code> page, but this time change the extension to the more standard <code>.html</code> or <code>.htm</code>. Test this new page via localhost. The SSI will not run, since the server only parses file extensions defined by the developer.</li>
	<li>Update the <code>.htaccess</code> file by adding more extensions to it's SSI parsing. For example: 
	<h4>Before</h4><pre><code>AddType text/html .shtml 
AddHandler server-parsed .shtml 
Options Indexes FollowSymLinks Includes</code></pre><h4>After</h4><pre><code>#note the space delimited list of file extensions added...
AddType text/html .shtml .html .htm
AddHandler server-parsed .shtml .html .htm 
Options Indexes FollowSymLinks Includes 
	</code></pre>
	</li>
	<li>Retest the page. SSIs should now work on pages that end with <code>.html</code> and <code>.htm</code></li>
</ul>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #5: Formatting -->
 
<div id="Exercise_#5_Formatting" class="contblock"><h2>Exercise #5: Formatting</h2>
<div>

<p>Use SSI to add a formatted date to an HTML page matching this pattern: <code><!--#config timefmt="%A, %B %e" --><!--#echo var="DATE_LOCAL" --></code></p>
<div id="Formatting"><h3>Formatting</h3><div>
<ul>
	<li>Showing the raw date isn't always the attractive option</li>
	<li>Formatting the date to show in a configurable manner is required</li>
	<li>This is done through the <code>config timefmt</code> command</li>
</ul>
<p>For a hint, check this page:<br />
<a href="http://www.htmlite.com/SSI005.shtml">http://www.htmlite.com/SSI005.shtml</a>
<br />
	Lots of examples on how to <a href="http://www.zytrax.com/tech/web/ssi.htm#time">configure time and date with SSIs</a></p></div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Include Files -->
 
<div id="Include_Files" class="contblock"><h2>Include Files</h2>
<div>

<div id="Adding_the_Include_token_will_import_code_from_external_files"><h3>Adding the Include token will import code from external files</h3><div>
<p>Separate the code of your pages into separate files, based upon the role, for example:
<ul>
<li>header</li>
<li>navigation</li>
<li>footer</li>
<li>content</li>
</ul>
</p>
<p>If the code for the heading is located in the file head.inc, an shtml page can import this code with the include token:<br />
<code>&lt;!--#include file="inc/head.inc" --&gt;</code></p>


</div></div>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #6a: Dynamic Navigation -->
 
<div id="Exercise_#6a_Dynamic_Navigation" class="contblock"><h2>Exercise #6a: Dynamic Navigation</h2>
<div>

<p>Deploy a navigation using SSI. </p>
<ul>
<li><a href="/_shared_resources_1950/downloads/server_side_includes.zip">Download the exercise source files</a>.</li>
<li>Extract the navigation related code from each html file</li>
<li>Place the navigation code in one external file</li>
<li>Use the server side includes 'include' token to load the navigation on each page. EG:<br /><code>&lt;!--#include file="inc/nav.inc" --&gt;</code></li>
<li><a href="/_shared_resources_1950/downloads/server_side_includes_solution_a.zip">Download a sample solution</a></li>
</ul>


</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: SSI Control Structure -->
 
<div id="SSI_Control_Structure" class="contblock"><h2>SSI Control Structure</h2>
<div>

<p>You can use SSI to assess a situation and make decision about what instructions to execute.<pre><code>&lt;!--#if expr="test_condition" -->
	...perform code block A...
&lt;!--#else -->
	..perform code block B...
&lt;!--#endif -->
</code></pre></p>
<p>Based on the <strong>if</strong> <code>test_condition</code> either code block A or B will be performed, but not both. An example <code>test_condition</code> might be<pre><code>&lt;!--#if expr="v('DOCUMENT_NAME') == 'abc.shtml'" -->
</code></pre>tests to see if the current document name is 'abc.shtml'</p>
<p><strong>NOTE:</strong> on older version Apache servers (eg: <code>bcitcomp.ca</code>), the syntax for the opening instruction of the <code>if</code> expression looks a little different:<br />
<code>&lt;!--#if expr="$QUERY_STRING = ''"--></code>
</p>


</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Exercise #6b: Dynamic Navigation -->
 
<div id="Exercise_#6b_Dynamic_Navigation" class="contblock"><h2>Exercise #6b: Dynamic Navigation</h2>
<div>

<p>Update your code from the previous SSI Navigation exercise.</p>
<p>Use the if control structure to enhance your SSI navigation code. Create a unique styled version of the nav option for the page the user is currently viewing.</p>
<p><a href="/_shared_resources_1950/downloads/server_side_includes_solution_b.zip">Download a sample solution</a></p>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: SSI Advanced Exercise - Gallery -->
 
<div id="SSI_Advanced_Exercise_Gallery" class="contblock"><h2>SSI Advanced Exercise - Gallery</h2>
<div>

<p>Instead of creating a gallery that contains many pages, you can build one that exists as a single page using SSIs and the "Query String".</p>

<p>See the <a href="exercises/gallery.html">Gallery Exercise</a> on how this is done and give it a try.</p>
<p><a href="/_shared_resources_1950/downloads/query_string_exercise_solution.zip">Download a sample solution</a></p>
	<p>Session #9's quiz will be written, closed book.</p>


</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]: Homework -->
 
<div id="Homework" class="contblock"><h2>Homework</h2>
<div>

<ul>
	<li>due by midnight before the next class</li>
	<li>homework specifications will be available here  upon release</li>
	<li><a href="/_shared_resources_1950/downloads/comp1950_homework07.pdf">download the homework</a>	</li> 
</ul>

</div>
<a href="#top" class="btop">back to top</a>
</div>
<!-- [3]:  -->
 
<div id="footer"><h2></h2>
<div>

			<a href="#top">Top of Page</a> | <a href="/comp1950/">Home</a>
		
</div>
<a href="#top" class="btop">back to top</a>
</div>
